/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ManagementImport } from './routes/_management'
import { Route as IndexImport } from './routes/index'
import { Route as ManagementManagementIndexImport } from './routes/_management.management.index'
import { Route as ManagementManagementTasksImport } from './routes/_management.management.tasks'

// Create/Update Routes

const ManagementRoute = ManagementImport.update({
  id: '/_management',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManagementManagementIndexRoute = ManagementManagementIndexImport.update({
  id: '/management/',
  path: '/management/',
  getParentRoute: () => ManagementRoute,
} as any)

const ManagementManagementTasksRoute = ManagementManagementTasksImport.update({
  id: '/management/tasks',
  path: '/management/tasks',
  getParentRoute: () => ManagementRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_management': {
      id: '/_management'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ManagementImport
      parentRoute: typeof rootRoute
    }
    '/_management/management/tasks': {
      id: '/_management/management/tasks'
      path: '/management/tasks'
      fullPath: '/management/tasks'
      preLoaderRoute: typeof ManagementManagementTasksImport
      parentRoute: typeof ManagementImport
    }
    '/_management/management/': {
      id: '/_management/management/'
      path: '/management'
      fullPath: '/management'
      preLoaderRoute: typeof ManagementManagementIndexImport
      parentRoute: typeof ManagementImport
    }
  }
}

// Create and export the route tree

interface ManagementRouteChildren {
  ManagementManagementTasksRoute: typeof ManagementManagementTasksRoute
  ManagementManagementIndexRoute: typeof ManagementManagementIndexRoute
}

const ManagementRouteChildren: ManagementRouteChildren = {
  ManagementManagementTasksRoute: ManagementManagementTasksRoute,
  ManagementManagementIndexRoute: ManagementManagementIndexRoute,
}

const ManagementRouteWithChildren = ManagementRoute._addFileChildren(
  ManagementRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ManagementRouteWithChildren
  '/management/tasks': typeof ManagementManagementTasksRoute
  '/management': typeof ManagementManagementIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ManagementRouteWithChildren
  '/management/tasks': typeof ManagementManagementTasksRoute
  '/management': typeof ManagementManagementIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_management': typeof ManagementRouteWithChildren
  '/_management/management/tasks': typeof ManagementManagementTasksRoute
  '/_management/management/': typeof ManagementManagementIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/management/tasks' | '/management'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/management/tasks' | '/management'
  id:
    | '__root__'
    | '/'
    | '/_management'
    | '/_management/management/tasks'
    | '/_management/management/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ManagementRoute: typeof ManagementRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ManagementRoute: ManagementRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_management"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_management": {
      "filePath": "_management.tsx",
      "children": [
        "/_management/management/tasks",
        "/_management/management/"
      ]
    },
    "/_management/management/tasks": {
      "filePath": "_management.management.tasks.tsx",
      "parent": "/_management"
    },
    "/_management/management/": {
      "filePath": "_management.management.index.tsx",
      "parent": "/_management"
    }
  }
}
ROUTE_MANIFEST_END */
